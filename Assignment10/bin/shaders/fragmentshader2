#version 130
uniform sampler2D gSampler;

uniform vec4 eyeVector;

in vec4 LightPosW;
in vec4 AmbientLightColor;
in vec4 DiffuseLightColor;
in vec4 SpecularLightColor;

in vec4 SpotLightDirection;
in float SpotLightCutoff;

uniform vec4 v_obj_ambient;
uniform vec4 v_obj_diffuse;
uniform vec4 v_obj_specular;
uniform float v_obj_shine;

in vec4 normal;
in vec4 position;

uniform mat4 mvpMatrix;
uniform mat4 modelMatrix;
uniform mat4 viewMatrix;

void main()
{
    vec4 Ambient = v_obj_ambient * AmbientLightColor; //temporarily, add in global and light source ambient later
 
    // Compute the diffuse term.
    vec4 N = normalize( normal );
    vec4 L = normalize( LightPosW - position );
    float NdotL = max( dot( N, L ), 0 );
    vec4 Diffuse =  NdotL * DiffuseLightColor * v_obj_diffuse;
     
    // Compute the specular term.
    vec4 V = normalize( eyeVector - position );
    vec4 H = normalize( L + V );
    vec4 R = reflect( -L, N );
    float RdotV = max( dot( R, V ), 0 );
    float NdotH = max( dot( N, H ), 0 );
    vec4 Specular = pow( RdotV, v_obj_shine ) * SpecularLightColor * v_obj_specular;

    //calculate spotlight
    float Spotlight = 0;
    vec4 n = normalize(normal);
    vec4 lightDir = vec4(LightPosW-position); 

    /* compute the dot product between normal and ldir */
    float SNdotL = max(dot(n,normalize(lightDir)),0.0);
    if (SNdotL > 0.0) {
     
        float spotEffect = dot(normalize(SpotLightDirection),
                normalize(-lightDir));
        if (spotEffect > radians(SpotLightCutoff)) {
            Spotlight = 1;
     
        }
    } 
     
    gl_FragColor = Spotlight * ( Ambient + Diffuse + Specular ) * texture2D( gSampler, gl_TexCoord[0].st );
}
