#version 130
in highp vec2 v_tex;
in highp vec3 v_normal;
in highp vec3 v_position;

uniform highp vec3 eyeVector;

struct Light{
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    vec3 spotdirection;
    float spotcutoff;
};

struct LightMaterial{
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shine;
};

uniform mediump Light lights[10];
uniform lowp LightMaterial lightMat;

out highp vec3 normal;
out highp vec3 position;
out highp vec3 LightTotal;

uniform highp mat4 mvpMatrix;
uniform highp mat4 modelMatrix;
uniform highp mat4 viewMatrix;

void main()
{
    gl_Position = mvpMatrix * vec4(v_position, 1.0);
    gl_TexCoord[0].st = v_tex;

    normal = normalize((modelMatrix * vec4(v_normal, 0)).rgb);
    position = (modelMatrix * vec4(v_position, 1)).rgb;

    vec3 LT = vec3(0,0,0);

    LightTotal = vec3(0,0,0);

    vec3 V = normalize( eyeVector - position );

    for(int i=0;i<5;i++)
    {
        // Compute the diffuse term.
        vec3 L = normalize( lights[i].position - position );
        float NdotL = max( dot( normal, L ), 0 );

        LT = LT + lightMat.ambient * lights[i].ambient; //temporarily, add in global and light source ambient later

        //calculate spotlight
        /* compute the dot product between normal and ldir */
        if (NdotL > 0.0)
        {
            float spotEffect = dot(lights[i].spotdirection, -L);

            if (spotEffect > radians(lights[i].spotcutoff))
            {
                LT = LT +  NdotL * lights[i].diffuse * lightMat.diffuse;
                 
                // Compute the specular term.
                vec3 H = normalize( L + V );
                float RdotV = max( dot( normal, H ), 0 );
                if(RdotV>0)
                {
                    LT = LT + pow( RdotV, lightMat.shine ) * lights[i].specular * lightMat.specular;
                }
            }
        }
    }
    if(LT[0]>1.0)
        LT[0] = 1.0;
    if(LT[1]>1.0)
        LT[1] = 1.0;
    if(LT[2]>1.0)
        LT[2] = 1.0;
    if(LT[0]<0.0)
        LT[0] = 0.1;
    if(LT[1]<0.0)
        LT[1] = 0.1;
    if(LT[2]<0.0)
        LT[2] = 0.1;

    LightTotal = LT;
}
