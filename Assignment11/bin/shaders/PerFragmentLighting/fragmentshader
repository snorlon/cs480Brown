#version 130

uniform sampler2D gSampler;

uniform highp vec3 eyeVector;

struct Light{
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    vec3 spotdirection;
    float spotcutoff;
};

struct LightMaterial{
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shine;
};

uniform mediump Light lights[10];
uniform lowp LightMaterial lightMat;

in highp vec3 normal;
in highp vec3 position;



void main()
{
    vec3 LightTotal = vec3(0.0,0.0,0.0);
    vec3 lightParts[5];

    for(int j=0;j<5;j++)
    {
        lightParts[j] = lightMat.ambient * lights[j].ambient;
    }

    vec3 V = normalize( eyeVector - position );

    for(int i=0;i<5;i++)
    {
        // Compute the diffuse term.
        vec3 L = normalize( lights[i].position - position );
        float NdotL = max( dot( normal, L ), 0 );

        //calculate spotlight
        /* compute the dot product between normal and ldir */

        float spotEffect = dot(lights[i].spotdirection, -L);

        if (spotEffect > radians(lights[i].spotcutoff))
        {
            lightParts[i] +=  NdotL * lights[i].diffuse * lightMat.diffuse;
             
            // Compute the specular term.
            vec3 H = normalize( L + V );
            float RdotV = max( dot( normal, H ), 0 );
            lightParts[i] += pow( RdotV, lightMat.shine ) * lights[i].specular * lightMat.specular;
        }

        LightTotal += lightParts[i];
    }  
     
    gl_FragColor = vec4( LightTotal, 1 ) * texture2D( gSampler, gl_TexCoord[0].st );
}
