#version 130
uniform sampler2D gSampler;

uniform vec4 eyeVector;

struct Light{
    vec4 position;
    vec4 ambient;
    vec4 diffuse;
    vec4 specular;
    vec4 spotdirection;
    float spotcutoff;
};

uniform Light lights[200];

uniform vec4 v_obj_ambient;
uniform vec4 v_obj_diffuse;
uniform vec4 v_obj_specular;
uniform float v_obj_shine;

in vec4 normal;
in vec4 position;

uniform mat4 mvpMatrix;
uniform mat4 modelMatrix;
uniform mat4 viewMatrix;

void main()
{
    vec4 Ambient = vec4(0,0,0,0);
    vec4 Diffuse = vec4(0,0,0,0);
    vec4 Specular = vec4(0,0,0,0);

    vec4 N = normalize( normal );
    vec4 V = normalize( eyeVector - position );

    for(int i=0;i<10;i++)
    {
     
        // Compute the diffuse term.
        vec4 L = normalize( lights[i].position - position );
        float NdotL = max( dot( N, L ), 0 );

        //calculate spotlight
        /* compute the dot product between normal and ldir */
        if (NdotL > 0.0) {
            float spotEffect = dot(lights[i].spotdirection, -L);
            if (spotEffect > radians(lights[i].spotcutoff))
            {
                Ambient += v_obj_ambient * lights[i].ambient; //temporarily, add in global and light source ambient later

                Diffuse +=  NdotL * lights[0].diffuse * v_obj_diffuse;
                 
                // Compute the specular term.
                vec4 H = normalize( L + V );
                vec4 R = reflect( -L, N );
                float RdotV = max( dot( R, V ), 0 );
                if(RdotV>0)
                {
                    Specular += pow( RdotV, v_obj_shine ) * lights[i].specular * v_obj_specular;
                }
            }
        } 
    }
     
    gl_FragColor = ( Ambient + Diffuse + Specular ) * texture2D( gSampler, gl_TexCoord[0].st );
}
